import openai
import subprocess
import os

# Set your OpenAI API key
openai.api_key = 'api key'

# Function to convert LaTeX to PDF
def convert_latex_to_pdf(latex_file):
    try:
        # Full path to pdflatex
        pdflatex_path = '/Library/TeX/texbin/pdflatex'

        # Print debug information
        print("Using pdflatex at:", pdflatex_path)
        print("Working directory:", os.getcwd())
        print("File exists:", os.path.exists(latex_file))

        # Run pdflatex to compile the .tex file
        subprocess.run([pdflatex_path, latex_file], check=True)
        print(f"Successfully converted {latex_file} to PDF.")
    except subprocess.CalledProcessError as e:
        print(f"Error during conversion: {e}")
    except FileNotFoundError as e:
        print(f"pdflatex not found: {e}")

# Function to extract interview data from transcript using GPT
def extract_interview_data_from_txt(file_path):
    """
    Extract the interview data from a text file using GPT.
    """
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"The file at path {file_path} was not found.")
    
    with open(file_path, 'r') as file:
        transcript = file.read()

    # Use GPT to process the transcript and extract key data
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",  # Updated model
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": f"Extract the following information from the interview transcript:\n\n"
                                       f"1. Candidate Name\n"
                                       f"2. Position Applied For\n"
                                       f"3. Interview Date\n"
                                       f"4. Technical Skills\n"
                                       f"5. Problem-Solving Skills\n"
                                       f"6. Communication Skills\n"
                                       f"7. Key Projects Discussed\n"
                                       f"8. Strengths\n"
                                       f"9. Areas for Improvement\n"
                                       f"10. Final Recommendations\n\n"
                                       f"Interview Transcript: {transcript}"}
        ],
        temperature=0.7,
        max_tokens=1000
    )

    # Extracted response is now in a structured string, not a JSON
    extracted_data = response['choices'][0]['message']['content'].strip()

    return extracted_data

# Function to generate LaTeX code based on the interview summary extracted by GPT
def generate_latex_from_summary(extracted_data):
    """
    Generate LaTeX code based on the extracted interview data.
    """
    latex_code = f"""
\\documentclass{{article}}
\\usepackage{{tikz}}
\\usetikzlibrary{{positioning}}
\\title{{Detailed Interview Summary Report}}
\\author{{Generated by Hireal}}
\\date{{\\today}}
\\begin{{document}}
\\maketitle

\\section{{Candidate Overview}}
{extracted_data}

\\section{{Interview Summary}}
The interview evaluated the candidate across multiple dimensions:
- **Technical Proficiency**: {extracted_data}
- **Problem-Solving Skills**: {extracted_data}
- **Communication**: {extracted_data}

\\section{{Strengths and Areas for Improvement}}
{extracted_data}

\\section{{Graphical Representation}}
\\begin{{tikzpicture}}
% Define nodes
\\node[draw, circle, fill=blue!10] (intro) {{Introduction}};
\\node[draw, rectangle, right=2.5cm of intro, fill=green!10] (projects) {{Project Discussion}};
\\node[draw, rectangle, below=1.5cm of projects, fill=yellow!10] (technical) {{Technical Assessment}};
\\node[draw, rectangle, right=2.5cm of projects, fill=cyan!10] (strengths) {{Strengths}};
\\node[draw, rectangle, below=1.5cm of strengths, fill=red!10] (weaknesses) {{Weaknesses}};
\\node[draw, rectangle, below=1.5cm of intro, fill=purple!10] (feedback) {{Final Feedback}};

% Draw arrows
\\draw[->, thick] (intro) -- (projects);
\\draw[->, thick] (projects) -- (technical);
\\draw[->, thick] (projects) -- (strengths);
\\draw[->, thick] (technical) -- (weaknesses);
\\draw[->, thick] (strengths) -- (weaknesses);
\\draw[->, thick, dashed] (weaknesses) -- (feedback);
\\draw[->, thick, dashed] (strengths) -- (feedback);

% Add annotations
\\node[above of=projects, yshift=0.5cm, text width=5cm, align=center] 
{{Frax AI discussion demonstrated \\\\ AI skills and innovation.}};
\\node[below of=technical, yshift=-0.5cm, text width=5cm, align=center] 
{{Good algorithmic performance; \\\\ struggled with edge cases.}};
\\node[below of=feedback, yshift=-1cm, text width=8cm, align=center] 
{{Recommended focus on system design \\\\ and scalability improvements.}};

\\end{{tikzpicture}}

\\section{{Final Recommendations}}
{extracted_data}

\\end{{document}}
"""
    return latex_code

# Function to save LaTeX code to a file
def save_latex_to_file(latex_code, file_path):
    """
    Save the LaTeX code to a .tex file
    """
    with open(file_path, 'w') as latex_file:
        latex_file.write(latex_code)
    print(f"LaTeX code saved to {file_path}")

# Main function to run the program
def main():
    # Path to the interview transcript file
    transcribed_file_path = '/Users/divyamjindal/Desktop/coding/techstart/interview_transcript.txt'  # Modify this path accordingly
    latex_output_path = '/Users/divyamjindal/Desktop/coding/techstart/latex.tex'  # Path to save the LaTeX file

    # Step 1: Extract data from the transcript using GPT
    try:
        extracted_data = extract_interview_data_from_txt(transcribed_file_path)
    except FileNotFoundError as e:
        print(e)
        return

    if not extracted_data:
        print("Error: Unable to process the interview transcript.")
        return

    # Step 2: Generate LaTeX code from the extracted data
    latex_code = generate_latex_from_summary(extracted_data)

    # Step 3: Save the LaTeX code to a file
    save_latex_to_file(latex_code, latex_output_path)

    # Step 4: Convert the LaTeX file to PDF
    convert_latex_to_pdf(latex_output_path)

if __name__ == "__main__":
    main()
